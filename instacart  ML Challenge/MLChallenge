#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct  7 14:02:23 2018

@author: Bin
"""

import pandas as pd
import numpy as np

order_items=pd.read_csv("/Users/Bin/Downloads/instacart-picking-time-challenge-data/order_items.csv")
test_trips=pd.read_csv("/Users/Bin/Downloads/instacart-picking-time-challenge-data/test_trips.csv")
train_trips=pd.read_csv("/Users/Bin/Downloads/instacart-picking-time-challenge-data/train_trips.csv")

len(set(order_items["trip_id"]))
len(set(test_trips["trip_id"]))
len(set(train_trips["trip_id"]))
len(set(train_trips["shopper_id"]))



list(order_items.columns.values)
list(test_trips.columns.values)
list(train_trips.columns.values)

type(train_trips['shopping_started_at'])

start=pd.to_datetime(train_trips['shopping_started_at'])#for train
start_test=pd.to_datetime(test_trips['shopping_started_at'])#for train
endtime=pd.to_datetime(train_trips['shopping_ended_at'])




#create interval x vars
train_trips['start_wk_day']=start.dt.dayofweek
train_trips['start_hour']=start.dt.hour    #for train

test_trips['start_wk_day']=start_test.dt.dayofweek
test_trips['start_hour']=start_test.dt.hour    #for test



diff=endtime-start
train_trips['Duration']= diff.dt.total_seconds()  #create response var

#create additional x vars on trip_id level in item table
order_items.groupby(['trip_id'])['item_id'].count()
a=order_items.groupby(['trip_id'])['item_id'].nunique() #one item in one trip
a1 = pd.DataFrame({'trip_id':a.index, 'item_kinds':a.values})



b=order_items.groupby(['trip_id'])['quantity'].sum()
b1 = pd.DataFrame({'trip_id':b.index, 'sum_quantity':b.values})

order_items.groupby(['trip_id'])['department_name'].count()
c=order_items.groupby(['trip_id'])['department_name'].nunique() #couple items in one department
c1 = pd.DataFrame({'trip_id':c.index, 'department_cnt':c.values})

import matplotlib.pyplot as plt


train_trips.describe()

train_trips1 = pd.merge(train_trips, a1, how='left',on=['trip_id'])
train_trips2 = pd.merge(train_trips1, b1, how='left',on=['trip_id'])
train_trips3 = pd.merge(train_trips2, c1, how='left',on=['trip_id'])


test_trips1 = pd.merge(test_trips, a1, how='left',on=['trip_id'])
test_trips2 = pd.merge(test_trips1, b1, how='left',on=['trip_id'])
test_trips3 = pd.merge(test_trips2, c1, how='left',on=['trip_id'])#for test



list(train_trips3.columns.values)

train_trips3.apply(lambda x: x.value_counts()).T.stack()
plt.hist(train_trips3[ 'start_hour'])
plt.hist(train_trips3['model_cat'])
plt.hist(train_trips3['shopper_id'])





list(train_trips3.columns.values)

#train_trips3["visti_cat"]=train_trips3.start_hour.astype("category").cat.codes
train_trips3["model_cat"]=train_trips3.fulfillment_model.astype("category").cat.codes
train_trips3["store_cat"]=train_trips3.store_id.astype("category").cat.codes  #for Train
#train_trips3["day_cat"]=train_trips3.start_wk_day.astype("category").cat.codes
#train_trips3["shopper_cat"]=train_trips3.shopper_id.astype("category").cat.codes
test_trips3["model_cat"]=test_trips3.fulfillment_model.astype("category").cat.codes
test_trips3["store_cat"]=test_trips3.store_id.astype("category").cat.codes  #for Test



from sklearn.model_selection import train_test_split
train, test = train_test_split(train_trips3,test_size=0.25)

trainX=train[['start_wk_day','start_hour','shopper_id','item_kinds','sum_quantity','department_cnt','model_cat','store_cat']]
trainY=train[['Duration']]

testX=test[['start_wk_day','start_hour','shopper_id','item_kinds','sum_quantity','department_cnt','model_cat','store_cat']]
testY=test[['Duration']]

X=test_trips3[['start_wk_day','start_hour','shopper_id','item_kinds','sum_quantity','department_cnt','model_cat','store_cat']]


plt.scatter(testX['start_hour'],testY)


#linear Regression

from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error,r2_score
import statsmodels.api as sm

from scipy import stats
import regressors
from regressors import stats
regr=linear_model.LinearRegression()
regr.fit(trainX, trainY)
r2_score(trainY, regr.predict(trainX))

trainX.corr()  #sum_quantity, item_kinds,department_cnt are correlated

#Ridge Regression
from sklearn import linear_model
Ridg = linear_model.RidgeCV (alphas=[0.1, 1.0, 10.0],cv=3)
Ridg.fit(trainX,trainY) 
Ridg.predict(trainX)
r2_score(trainY,Ridg.predict(trainX))  #R2 =0.29, not improve much


#GBM
import numpy as np
import matplotlib.pyplot as plt

from sklearn import ensemble
from sklearn import datasets
from sklearn.utils import shuffle
from sklearn.metrics import mean_squared_error
params = {'n_estimators': 1000, 'max_depth': 4, 'min_samples_split': 2,
          'learning_rate': 0.05, 'loss': 'ls'}
clf = ensemble.GradientBoostingRegressor(**params)

gbm=clf.fit(trainX, trainY)
trainY_pred=gbm.predict(trainX)
r2_score(trainY,trainY_pred)

mse = mean_squared_error(testY, gbm.predict(testX))
print("MSE: %.4f" % mse)
#plt.scatter(testY_pred,testY)

plt.scatter(testY,gbm.predict(testX))


#Predict for test dataset
Y=gbm.predict(X)
test_trips3['shopping_time']=Y
result=test_trips3[['trip_id','shopping_time']]



header=['trip_id','shopping_time']

result.to_csv('/Users/Bin/Downloads/instacart_result.csv', columns=header)

































    
    




























